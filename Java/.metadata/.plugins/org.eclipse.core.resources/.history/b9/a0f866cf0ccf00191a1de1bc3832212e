package cass.oli.revilo;

import java.awt.Canvas;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;

public abstract class Game extends Canvas implements Runnable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public static final int TARGET_FPS = 60;
	public static final int WIDTH = 1280, HEIGHT = 720;
	public int width = WIDTH, height = HEIGHT;
	public boolean running, paused;
	public Revilo revilo = null;
	public BufferedImage[] sprites;
	
	public int mouseX, mouseY;
	public int dragX, dragY;
	public boolean dragging = false;
	
	public Game(Revilo revilo) {
		this.revilo = revilo;
		loadImages();
	}
	
	public Game() {
		loadImages();
	}
	
	private void loadImages() {
		sprites = new BufferedImage[2];
		sprites[0] = ImageIO.read(getClass().getResource("/res/Home.png"));
	}
	
	public abstract void leftClick(int x, int y);
	public abstract void rightClick(int x, int y);
	public abstract void dragTo(int x, int y);
	protected abstract void tick();
	protected abstract void render();
	
	public void resize() {
		width = this.getWidth();
		height = this.getHeight();
	}
	
	@Override
	public void run() {
		final long OPTIMAL_TIME = 1000000000 / TARGET_FPS;
		running = true;
		paused = false;
		
		while(running) {
			long lastTime = System.nanoTime();
			
			if(!paused) tick();
			render();
						
			long tick_time = (lastTime - System.nanoTime() + OPTIMAL_TIME)/1000000;
			if(tick_time > 0){
				try{
					Thread.sleep(tick_time);
				}catch(Exception e) {}
			}
		}
	}
}
